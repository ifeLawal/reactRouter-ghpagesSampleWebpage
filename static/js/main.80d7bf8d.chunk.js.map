{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["hashHistory","createHashHistory","basename","process","Home","About","name","match","params","to","Contact","history","onClick","push","Work","useHistory","FakeText","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQA4BMA,E,MAAcC,GAAkB,CAAEC,SAAUC,YA2ClD,IAAMC,EAAO,kBACX,kBAAC,WAAD,KACE,oCACA,kBAAC,EAAD,QAKEC,EAAQ,SAAC,GAAD,IAAsBC,EAAtB,EAAGC,MAASC,OAAUF,KAAtB,OACZ,kBAAC,WAAD,KACY,aAATA,EAAsB,kBAAC,IAAD,CAAUG,GAAG,MAAS,KAC7C,qCAAWH,GACX,kBAAC,EAAD,QAKEI,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACd,kBAAC,WAAD,KACE,uCACA,4BAAQC,QAAS,kBAAMD,EAAQE,KAAK,OAApC,cACA,kBAAC,EAAD,QAKEC,EAAO,WACX,IAAMH,EAAUI,cAChB,OACE,kBAAC,WAAD,KACE,oCACA,4BAAQH,QAAS,kBAAMD,EAAQE,KAAK,OAApC,gBACA,kBAAC,EAAD,QAgBAG,EAAW,kBACf,6PAKaC,EA/Ff,WAIE,OACE,kBAAC,IAAD,CAAQN,QAASX,GACf,8BACE,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMS,GAAG,KAAT,SAEJ,4BAAI,kBAAC,IAAD,CAAMA,GAAE,iBAVT,aAUC,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,SAEJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,cAGN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IAG/B,oCACE,kBAAC,IAAD,CAAOe,KAAK,eAAeC,UAAWf,IACtC,kBAAC,IAAD,CAAOc,KAAK,WAAWC,UAAWV,IAClC,kBAAC,IAAD,CAAOS,KAAK,QAAQC,UAAWN,KAInC,kBAAC,IAAD,CAAOO,OAAQ,kBAAM,0DC9CbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.80d7bf8d.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n// import logo from './logo.svg';\nimport './index.css';\n\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect, useHistory } from 'react-router-dom';\nimport createHashHistory from 'history/createHashHistory'\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL});\n\nfunction App() {\n  const name = 'John Doe'\n  const isAuthenticated = true\n  // const history = useHistory()\n  return (\n    <Router history={hashHistory}>\n      <main>\n        <nav>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            {/* <li><Link to=\"/about\">About</Link></li> */}\n            <li><Link to={`/about/${name}`}>About</Link></li>\n            <li><Link to='/work'>Work</Link></li>\n            {/* <li><Link to='/test'>Test</Link></li> */}\n            <li><Link to=\"/contact\">Contact</Link></li>\n          </ul>\n        </nav>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            {/* <Route path=\"/about\" component={About} /> */}\n            {isAuthenticated ?\n              <>\n                <Route path=\"/about/:name\" component={About} />\n                <Route path=\"/contact\" component={Contact} />\n                <Route path=\"/work\" component={Work} />\n                {/* <Route path=\"/test\" component={Test} /> */}\n              </> : <Route path=\"/noAccess\" component={NoAccess} />\n            }\n            <Route render={() => <h1>404: page not found</h1>} />\n          </Switch>\n      </main>\n    </Router>\n  );\n}\n\n// const Test = () => {\n\n//   return (<h1>This is a test class</h1>)\n// }\n\n// Home Page\nconst Home = () => (\n  <Fragment>\n    <h1>Home</h1>\n    <FakeText />\n  </Fragment>\n);\n\n// About Page\nconst About = ({ match: { params: { name } } }) => (\n  <Fragment>\n    {name !== 'John Doe' ? <Redirect to=\"/\" /> : null}\n    <h1>About {name}</h1>\n    <FakeText />\n  </Fragment>\n);\n\n// Contact\nconst Contact = ({ history }) => (\n  <Fragment>\n    <h1>Contact</h1>\n    <button onClick={() => history.push('/')} >Go to home</button>\n    <FakeText />\n  </Fragment>\n);\n\n// Work\nconst Work = () => {\n  const history = useHistory()\n  return (\n    <Fragment>\n      <h1>Work</h1>\n      <button onClick={() => history.push('/')} >Go back home</button>\n      <FakeText />\n    </Fragment>\n  );\n}\n\n// Work\nconst NoAccess = () => {\n  return (\n    <Fragment>\n      <h1>You do not have access to that page</h1>\n      <FakeText />\n    </Fragment>\n  );\n}\n\n\nconst FakeText = () => (\n  <p>\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto officia unde temporibus soluta eos dolorem, in aliquid nesciunt libero corrupti ea nostrum voluptate obcaecati quibusdam, impedit ipsa blanditiis animi dolor.\n  </p>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}